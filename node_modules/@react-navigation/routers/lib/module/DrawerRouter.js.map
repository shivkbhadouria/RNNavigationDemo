{"version":3,"sources":["DrawerRouter.tsx"],"names":["shortid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","history","find","it","filter","DrawerRouter","options","router","getInitialState","routeNames","routeParamList","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import shortid from 'shortid';\nimport { CommonAction, Router, PartialState } from '@react-navigation/core';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions;\n\nexport type DrawerNavigationState = Omit<\n  TabNavigationState,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state: DrawerNavigationState | PartialState<DrawerNavigationState>\n) => Boolean(state.history?.find(it => it.type === 'drawer'));\n\nconst openDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer' }],\n  };\n};\n\nconst closeDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter(it => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter(\n  options: DrawerRouterOptions\n): Router<DrawerNavigationState, DrawerActionType | CommonAction> {\n  const router = (TabRouter(options) as unknown) as Router<\n    DrawerNavigationState,\n    TabActionType | CommonAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const state = router.getInitialState({ routeNames, routeParamList });\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${shortid()}`,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${shortid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]}